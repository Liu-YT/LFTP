###
###
#include "client.h"

// 互斥锁
HANDLE hMutex = CreateMutex(NULL, FALSE, NULL);

Client::Client(string _ip, string _file, int _port)
{

    cout << "Initializing client...\n";
    this->serverIp = _ip;
    this->file = _file;
    this->serPort = _port;

    this->sockVersion = MAKEWORD(2, 2);
    if (WSAStartup(sockVersion, &wsaData) != 0)
        exit(1);

    this->cltSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (cltSocket == INVALID_SOCKET)
    {
        cerr << "socket create error!" << endl;
        exit(2);
    }

    this->serAddr.sin_family = AF_INET;
    ;
    this->serAddr.sin_port = htons(this->serPort);
    this->serAddr.sin_addr.S_un.S_addr = inet_addr(this->serverIp.c_str());

    this->addrLen = sizeof(serAddr);

    // 初始化拥塞窗口信息
    this->MSS = 1024;
    this->ssthresh = 4096;
    this->cwnd = MSS;

    cout << "Server socket created successfully..." << endl;
}

Client::~Client()
{
    closeConnect();
}

void Client::closeConnect()
{
    ::closesocket(cltSocket);
    ::WSACleanup();
    cout << "Socket closed..." << endl;
}

void Client::lsend()
{

    /*
    *   lsend
    *   file     文件名，包含具体路径 
    *   fileName 文件名，不含路径
    */
    string fileName = file.substr(file.find_last_of('/') + 1);

    // 打开文件
    ifstream readFile(file.c_str(), ios::in | ios::binary); //二进制读方式打开
    if (readFile == NULL)
    {
        cout << "File: " << file << " Can Not Open To Write" << endl;
        closeConnect();
        exit(1);
    }

    UDP_PACK pack;
    string str = "send" + fileName;
    pack.infoLength = str.size();
    for (int i = 0; i < str.size(); ++i)
        pack.info[i] = str[i];
    pack.info[str.size()] = '\0';

    // 发送文件名
    if (sendto(cltSocket, (char *)&pack, sizeof(pack), 0, (sockaddr *)&serAddr, addrLen) < 0)
    {
        cout << "Send File Name: " << file << " Failed" << endl;
        closeConnec